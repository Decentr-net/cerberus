// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entities "github.com/Decentr-net/cerberus/internal/entities"
	service "github.com/Decentr-net/cerberus/internal/service"
	schema "github.com/Decentr-net/cerberus/pkg/schema"
	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
	time "time"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// SaveImage mocks base method
func (m *MockService) SaveImage(ctx context.Context, r io.Reader, owner string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", ctx, r, owner)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SaveImage indicates an expected call of SaveImage
func (mr *MockServiceMockRecorder) SaveImage(ctx, r, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockService)(nil).SaveImage), ctx, r, owner)
}

// SavePDV mocks base method
func (m *MockService) SavePDV(ctx context.Context, p schema.PDVWrapper, owner types.AccAddress) (uint64, *entities.PDVMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePDV", ctx, p, owner)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(*entities.PDVMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SavePDV indicates an expected call of SavePDV
func (mr *MockServiceMockRecorder) SavePDV(ctx, p, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePDV", reflect.TypeOf((*MockService)(nil).SavePDV), ctx, p, owner)
}

// ListPDV mocks base method
func (m *MockService) ListPDV(ctx context.Context, owner string, from uint64, limit uint16) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPDV", ctx, owner, from, limit)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPDV indicates an expected call of ListPDV
func (mr *MockServiceMockRecorder) ListPDV(ctx, owner, from, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPDV", reflect.TypeOf((*MockService)(nil).ListPDV), ctx, owner, from, limit)
}

// ReceivePDV mocks base method
func (m *MockService) ReceivePDV(ctx context.Context, owner string, id uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceivePDV", ctx, owner, id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceivePDV indicates an expected call of ReceivePDV
func (mr *MockServiceMockRecorder) ReceivePDV(ctx, owner, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceivePDV", reflect.TypeOf((*MockService)(nil).ReceivePDV), ctx, owner, id)
}

// GetPDVMeta mocks base method
func (m *MockService) GetPDVMeta(ctx context.Context, owner string, id uint64) (*entities.PDVMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPDVMeta", ctx, owner, id)
	ret0, _ := ret[0].(*entities.PDVMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPDVMeta indicates an expected call of GetPDVMeta
func (mr *MockServiceMockRecorder) GetPDVMeta(ctx, owner, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPDVMeta", reflect.TypeOf((*MockService)(nil).GetPDVMeta), ctx, owner, id)
}

// GetProfiles mocks base method
func (m *MockService) GetProfiles(ctx context.Context, owner []string) ([]*entities.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfiles", ctx, owner)
	ret0, _ := ret[0].([]*entities.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfiles indicates an expected call of GetProfiles
func (mr *MockServiceMockRecorder) GetProfiles(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfiles", reflect.TypeOf((*MockService)(nil).GetProfiles), ctx, owner)
}

// GetRewardsMap mocks base method
func (m *MockService) GetRewardsMap() service.RewardMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardsMap")
	ret0, _ := ret[0].(service.RewardMap)
	return ret0
}

// GetRewardsMap indicates an expected call of GetRewardsMap
func (mr *MockServiceMockRecorder) GetRewardsMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardsMap", reflect.TypeOf((*MockService)(nil).GetRewardsMap))
}

// GetBlacklist mocks base method
func (m *MockService) GetBlacklist() service.Blacklist {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlacklist")
	ret0, _ := ret[0].(service.Blacklist)
	return ret0
}

// GetBlacklist indicates an expected call of GetBlacklist
func (mr *MockServiceMockRecorder) GetBlacklist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlacklist", reflect.TypeOf((*MockService)(nil).GetBlacklist))
}

// GetPDVDelta mocks base method
func (m *MockService) GetPDVDelta(ctx context.Context, owner string) (types.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPDVDelta", ctx, owner)
	ret0, _ := ret[0].(types.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPDVDelta indicates an expected call of GetPDVDelta
func (mr *MockServiceMockRecorder) GetPDVDelta(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPDVDelta", reflect.TypeOf((*MockService)(nil).GetPDVDelta), ctx, owner)
}

// GetPDVTotalDelta mocks base method
func (m *MockService) GetPDVTotalDelta(ctx context.Context) (types.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPDVTotalDelta", ctx)
	ret0, _ := ret[0].(types.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPDVTotalDelta indicates an expected call of GetPDVTotalDelta
func (mr *MockServiceMockRecorder) GetPDVTotalDelta(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPDVTotalDelta", reflect.TypeOf((*MockService)(nil).GetPDVTotalDelta), ctx)
}

// GetPDVRewardsNextDistributionDate mocks base method
func (m *MockService) GetPDVRewardsNextDistributionDate(ctx context.Context) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPDVRewardsNextDistributionDate", ctx)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPDVRewardsNextDistributionDate indicates an expected call of GetPDVRewardsNextDistributionDate
func (mr *MockServiceMockRecorder) GetPDVRewardsNextDistributionDate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPDVRewardsNextDistributionDate", reflect.TypeOf((*MockService)(nil).GetPDVRewardsNextDistributionDate), ctx)
}
