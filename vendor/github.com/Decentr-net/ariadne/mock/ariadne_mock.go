// Code generated by MockGen. DO NOT EDIT.
// Source: ariadne.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	ariadne "github.com/Decentr-net/ariadne"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFetcher is a mock of Fetcher interface
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// FetchBlocks mocks base method
func (m *MockFetcher) FetchBlocks(ctx context.Context, from uint64, handleFunc func(ariadne.Block) error, opts ...ariadne.FetchBlocksOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, from, handleFunc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchBlocks", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchBlocks indicates an expected call of FetchBlocks
func (mr *MockFetcherMockRecorder) FetchBlocks(ctx, from, handleFunc interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, from, handleFunc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBlocks", reflect.TypeOf((*MockFetcher)(nil).FetchBlocks), varargs...)
}

// FetchBlock mocks base method
func (m *MockFetcher) FetchBlock(height uint64) (*ariadne.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchBlock", height)
	ret0, _ := ret[0].(*ariadne.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBlock indicates an expected call of FetchBlock
func (mr *MockFetcherMockRecorder) FetchBlock(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBlock", reflect.TypeOf((*MockFetcher)(nil).FetchBlock), height)
}
