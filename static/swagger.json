{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Cerberus is an users' data keeper. The Cerberus encrypts data and pushes it into S3.",
    "title": "Cerberus",
    "version": "1.2.1"
  },
  "basePath": "/v1",
  "paths": {
    "/configs/rewards": {
      "get": {
        "description": "Returns rewards config.",
        "tags": [
          "Configs"
        ],
        "summary": "Get rewards config",
        "operationId": "GetRewardsConfig",
        "responses": {
          "200": {
            "description": "rewards config",
            "schema": {
              "$ref": "#/definitions/ObjectTypes"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/images": {
      "post": {
        "security": [
          {
            "public_key": [],
            "signature": []
          }
        ],
        "description": "Resizes (1920x1080, 480x270) and saves images",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Image"
        ],
        "operationId": "Save",
        "responses": {
          "200": {
            "description": "image successfully resized and saved as HD (1920x1080) and thumbnail (480x270)",
            "schema": {
              "$ref": "#/definitions/SaveImageResponse"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pdv": {
      "post": {
        "security": [
          {
            "public_key": [],
            "signature": []
          }
        ],
        "description": "Encrypts and saves PDV",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "PDV"
        ],
        "operationId": "Save",
        "parameters": [
          {
            "description": "batch of pdv",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PDV"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "pdv was put into storage",
            "schema": {
              "$ref": "#/definitions/SavePDVResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "signature wasn't verified",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pdv/{owner}": {
      "get": {
        "description": "Lists PDV",
        "produces": [
          "application/json"
        ],
        "tags": [
          "PDV"
        ],
        "operationId": "List",
        "parameters": [
          {
            "type": "string",
            "example": "decentr1u9slwz3sje8j94ccpwlslflg0506yc8y2ylmtz",
            "description": "PDV's address",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "uint64",
            "description": "id of PDV to start from",
            "name": "from",
            "in": "query"
          },
          {
            "maximum": 1000,
            "type": "integer",
            "format": "uint16",
            "description": "how many pdv will be returned",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of PDV",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64"
              }
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pdv/{owner}/{id}": {
      "get": {
        "security": [
          {
            "public_key": [],
            "signature": []
          }
        ],
        "description": "Returns plain PDV",
        "produces": [
          "application/json"
        ],
        "tags": [
          "PDV"
        ],
        "operationId": "Get",
        "parameters": [
          {
            "type": "string",
            "description": "PDV's address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "PDV",
            "schema": {
              "$ref": "#/definitions/PDV"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "signature wasn't verified",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "access to file is denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/pdv/{owner}/{id}/meta": {
      "get": {
        "description": "Returns metadata of PDV",
        "tags": [
          "PDV"
        ],
        "summary": "Get meta",
        "operationId": "GetMeta",
        "parameters": [
          {
            "type": "string",
            "description": "PDV's address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "metadata of pdv",
            "schema": {
              "$ref": "#/definitions/PDVMeta"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "PDV doesn't exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/profiles": {
      "get": {
        "description": "Returns profiles by addresses",
        "tags": [
          "Profile"
        ],
        "summary": "Get profiles",
        "operationId": "GetProfiles",
        "parameters": [
          {
            "example": "decentr1u9slwz3sje8j94ccpwlslflg0506yc8y2ylmtz,decentr1u9slwz3sje8j94ccpwlslflg0506yc8y2ylmtz",
            "description": "profile address",
            "name": "address",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "metadata of pdv",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/APIProfile"
              }
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "APIProfile": {
      "type": "object",
      "title": "Profile ...",
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "avatar": {
          "type": "string",
          "x-go-name": "Avatar"
        },
        "bio": {
          "type": "string",
          "x-go-name": "Bio"
        },
        "birthday": {
          "type": "string",
          "x-go-name": "Birthday"
        },
        "createdAt": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreatedAt"
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Emails"
        },
        "firstName": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "gender": {
          "type": "string",
          "x-go-name": "Gender"
        },
        "lastName": {
          "type": "string",
          "x-go-name": "LastName"
        }
      },
      "x-go-name": "Profile",
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server"
    },
    "AdvertiserID": {
      "type": "object",
      "title": "AdvertiserID is id for advertiser..",
      "properties": {
        "advertiser": {
          "type": "string",
          "x-go-name": "Advertiser"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/Decentr-net/cerberus/internal/schema/v1"
    },
    "Cookie": {
      "type": "object",
      "title": "Cookie is PDVData implementation for Cookies(according to https://developer.chrome.com/extensions/cookies).",
      "properties": {
        "domain": {
          "type": "string",
          "x-go-name": "Domain"
        },
        "expirationDate": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ExpirationDate"
        },
        "hostOnly": {
          "type": "boolean",
          "x-go-name": "HostOnly"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "sameSite": {
          "type": "string",
          "x-go-name": "SameSite"
        },
        "secure": {
          "type": "boolean",
          "x-go-name": "Secure"
        },
        "source": {
          "$ref": "#/definitions/Source"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/Decentr-net/cerberus/internal/schema/v1"
    },
    "DataV1": {
      "type": "object",
      "title": "DataV1 is interface for all data types.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "advertiserId",
            "cookie",
            "profile",
            "searchHistory",
            "location"
          ],
          "x-go-name": "TypeV1"
        }
      },
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server/swagger",
      "discriminator": "type"
    },
    "Date": {
      "type": "object",
      "title": "Date in ISO-8601 format (yyyy-mm-dd).",
      "x-go-package": "github.com/Decentr-net/cerberus/internal/schema/types"
    },
    "Error": {
      "type": "object",
      "title": "Error ...",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        }
      },
      "x-go-package": "github.com/Decentr-net/go-api"
    },
    "Gender": {
      "type": "string",
      "title": "Gender can be male or female.",
      "x-go-package": "github.com/Decentr-net/cerberus/internal/schema/types"
    },
    "Location": {
      "type": "object",
      "title": "Location is user's geolocation.",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double",
          "x-go-name": "Latitude"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "x-go-name": "Longitude"
        },
        "requestedBy": {
          "$ref": "#/definitions/Source"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        }
      },
      "x-go-package": "github.com/Decentr-net/cerberus/internal/schema/v1"
    },
    "ObjectTypes": {
      "type": "object",
      "title": "ObjectTypes contains count of each pdv type in batch.",
      "properties": {
        "advertiserId": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "AdvertiserID"
        },
        "cookie": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "Cookie"
        },
        "location": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "Location"
        },
        "profile": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "Profile"
        },
        "searchHistory": {
          "type": "integer",
          "format": "uint16",
          "x-go-name": "SearchHistoryV1"
        }
      },
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server/swagger"
    },
    "PDV": {
      "type": "object",
      "properties": {
        "version": {
          "x-go-name": "Version"
        }
      },
      "x-go-name": "PDVInterface",
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server/swagger",
      "discriminator": "version"
    },
    "PDVMeta": {
      "type": "object",
      "title": "PDVMeta contains info about PDV.",
      "properties": {
        "object_types": {
          "$ref": "#/definitions/ObjectTypes"
        },
        "reward": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Reward"
        }
      },
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server/swagger"
    },
    "Profile": {
      "type": "object",
      "title": "Profile is PDVData implementation for profile's data.",
      "properties": {
        "avatar": {
          "type": "string",
          "x-go-name": "Avatar"
        },
        "bio": {
          "type": "string",
          "x-go-name": "Bio"
        },
        "birthday": {
          "$ref": "#/definitions/Date"
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Emails"
        },
        "firstName": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "gender": {
          "$ref": "#/definitions/Gender"
        },
        "lastName": {
          "type": "string",
          "x-go-name": "LastName"
        }
      },
      "x-go-package": "github.com/Decentr-net/cerberus/internal/schema/v1"
    },
    "SaveImageResponse": {
      "type": "object",
      "title": "SaveImageResponse ...",
      "properties": {
        "hd": {
          "type": "string",
          "x-go-name": "HD"
        },
        "thumb": {
          "type": "string",
          "x-go-name": "Thumb"
        }
      },
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server"
    },
    "SavePDVResponse": {
      "type": "object",
      "title": "SavePDVResponse ...",
      "properties": {
        "id": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "ID"
        }
      },
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server"
    },
    "SearchHistory": {
      "type": "object",
      "title": "SearchHistory is user's search history.",
      "properties": {
        "domain": {
          "type": "string",
          "x-go-name": "Domain"
        },
        "engine": {
          "type": "string",
          "x-go-name": "Engine"
        },
        "query": {
          "type": "string",
          "x-go-name": "Query"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        }
      },
      "x-go-package": "github.com/Decentr-net/cerberus/internal/schema/v1"
    },
    "Source": {
      "type": "object",
      "title": "Source contains information about source of pdv.",
      "properties": {
        "host": {
          "description": "Domain of website where object was taken",
          "type": "string",
          "x-go-name": "Host"
        },
        "path": {
          "description": "Path of website's url where object was taken",
          "type": "string",
          "x-go-name": "Path"
        }
      },
      "x-go-package": "github.com/Decentr-net/cerberus/internal/schema/types"
    },
    "Time": {
      "description": "Programs using times should typically store and pass them as values,\nnot pointers. That is, time variables and struct fields should be of\ntype time.Time, not *time.Time.\n\nA Time value can be used by multiple goroutines simultaneously except\nthat the methods GobDecode, UnmarshalBinary, UnmarshalJSON and\nUnmarshalText are not concurrency-safe.\n\nTime instants can be compared using the Before, After, and Equal methods.\nThe Sub method subtracts two instants, producing a Duration.\nThe Add method adds a Time and a Duration, producing a Time.\n\nThe zero value of type Time is January 1, year 1, 00:00:00.000000000 UTC.\nAs this time is unlikely to come up in practice, the IsZero method gives\na simple way of detecting a time that has not been initialized explicitly.\n\nEach Time has associated with it a Location, consulted when computing the\npresentation form of the time, such as in the Format, Hour, and Year methods.\nThe methods Local, UTC, and In return a Time with a specific location.\nChanging the location in this way changes only the presentation; it does not\nchange the instant in time being denoted and therefore does not affect the\ncomputations described in earlier paragraphs.\n\nRepresentations of a Time value saved by the GobEncode, MarshalBinary,\nMarshalJSON, and MarshalText methods store the Time.Location's offset, but not\nthe location name. They therefore lose information about Daylight Saving Time.\n\nIn addition to the required “wall clock” reading, a Time may contain an optional\nreading of the current process's monotonic clock, to provide additional precision\nfor comparison or subtraction.\nSee the “Monotonic Clocks” section in the package documentation for details.\n\nNote that the Go == operator compares not just the time instant but also the\nLocation and the monotonic clock reading. Therefore, Time values should not\nbe used as map or database keys without first guaranteeing that the\nidentical Location has been set for all values, which can be achieved\nthrough use of the UTC or Local method, and that the monotonic clock reading\nhas been stripped by setting t = t.Round(0). In general, prefer t.Equal(u)\nto t == u, since t.Equal uses the most accurate comparison available and\ncorrectly handles the case when only one of its arguments has a monotonic\nclock reading.",
      "type": "string",
      "format": "date-time",
      "title": "A Time represents an instant in time with nanosecond precision."
    },
    "Timestamp": {
      "type": "object",
      "title": "Timestamp in RFC-3339 format.",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Time"
        }
      },
      "x-go-package": "github.com/Decentr-net/cerberus/internal/schema/types"
    },
    "advertiserId": {
      "title": "AdvertiserIDV1 contains id for an advertiser (e.g google, facebook).",
      "allOf": [
        {
          "$ref": "#/definitions/DataV1"
        },
        {
          "type": "object",
          "properties": {
            "advertiser": {
              "type": "string",
              "x-go-name": "Advertiser"
            },
            "name": {
              "type": "string",
              "x-go-name": "Name"
            },
            "value": {
              "type": "string",
              "x-go-name": "Value"
            }
          }
        }
      ],
      "x-class": "advertiserId",
      "x-go-name": "AdvertiserIDV1",
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server/swagger"
    },
    "cookie": {
      "title": "CookieV1 is PDVData implementation for Cookies(according to https://developer.chrome.com/extensions/cookies).",
      "allOf": [
        {
          "$ref": "#/definitions/DataV1"
        },
        {
          "type": "object",
          "properties": {
            "domain": {
              "type": "string",
              "x-go-name": "Domain"
            },
            "expirationDate": {
              "type": "integer",
              "format": "uint64",
              "x-go-name": "ExpirationDate"
            },
            "hostOnly": {
              "type": "boolean",
              "x-go-name": "HostOnly"
            },
            "name": {
              "type": "string",
              "x-go-name": "Name"
            },
            "path": {
              "type": "string",
              "x-go-name": "Path"
            },
            "sameSite": {
              "type": "string",
              "x-go-name": "SameSite"
            },
            "secure": {
              "type": "boolean",
              "x-go-name": "Secure"
            },
            "source": {
              "$ref": "#/definitions/Source"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "x-go-name": "Time"
            },
            "value": {
              "type": "string",
              "x-go-name": "Value"
            }
          }
        }
      ],
      "x-class": "cookie",
      "x-go-name": "CookieV1",
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server/swagger"
    },
    "location": {
      "title": "LocationV1 contains user's geolocation at a time.",
      "allOf": [
        {
          "$ref": "#/definitions/DataV1"
        },
        {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "number",
              "format": "double",
              "x-go-name": "Latitude"
            },
            "longitude": {
              "type": "number",
              "format": "double",
              "x-go-name": "Longitude"
            },
            "requestedBy": {
              "$ref": "#/definitions/Source"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "x-go-name": "Time"
            }
          }
        }
      ],
      "x-class": "location",
      "x-go-name": "LocationV1",
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server/swagger"
    },
    "profile": {
      "title": "ProfileV1 is profile data.",
      "allOf": [
        {
          "$ref": "#/definitions/DataV1"
        },
        {
          "type": "object",
          "properties": {
            "avatar": {
              "type": "string",
              "x-go-name": "Avatar"
            },
            "bio": {
              "type": "string",
              "x-go-name": "Bio"
            },
            "birthday": {
              "$ref": "#/definitions/Date"
            },
            "emails": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "x-go-name": "Emails"
            },
            "firstName": {
              "type": "string",
              "x-go-name": "FirstName"
            },
            "gender": {
              "$ref": "#/definitions/Gender"
            },
            "lastName": {
              "type": "string",
              "x-go-name": "LastName"
            }
          }
        }
      ],
      "x-class": "profile",
      "x-go-name": "ProfileV1",
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server/swagger"
    },
    "searchHistory": {
      "title": "SearchHistoryV1 contains user's search request.",
      "allOf": [
        {
          "$ref": "#/definitions/DataV1"
        },
        {
          "type": "object",
          "properties": {
            "domain": {
              "type": "string",
              "x-go-name": "Domain"
            },
            "engine": {
              "type": "string",
              "x-go-name": "Engine"
            },
            "query": {
              "type": "string",
              "x-go-name": "Query"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time",
              "x-go-name": "Time"
            }
          }
        }
      ],
      "x-class": "searchHistory",
      "x-go-name": "SearchHistoryV1",
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server/swagger"
    },
    "v1": {
      "title": "PDVV1 is main data object.",
      "allOf": [
        {
          "$ref": "#/definitions/PDV"
        },
        {
          "type": "object",
          "properties": {
            "pdv": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataV1"
              },
              "x-go-name": "PDV"
            }
          }
        }
      ],
      "x-class": "v1",
      "x-go-name": "PDVV1",
      "x-go-package": "github.com/Decentr-net/cerberus/internal/server/swagger"
    }
  },
  "securityDefinitions": {
    "public_key": {
      "description": "Blockchain account's public key",
      "type": "apiKey",
      "name": "Public-Key",
      "in": "header"
    },
    "signature": {
      "description": "Signature of request digest.\u003cbr\u003e\nDigest is sha256 sum of request: `{body as is}`+`{request uri}`.\u003cbr\u003e\nFor example:\u003cbr\u003e\nPrivate key in hex: ```cfe43c70347c7e39084612d9448f3ed86ed733a33a67de35c7e335b3c4edc37d```\u003cbr\u003e\nRequest url: ```http://localhost/v1/pdv```\u003cbr\u003e\nBody: ```{\"some\":\"file\"}```\u003cbr\u003e\nDigest will be made from ```{\"some\":\"file\"}/v1/pdv```\u003cbr\u003e\nDigest in hex:\u003cbr\u003e\n```4a1084d05820d60aee9ce600227ca2290ef63e80e5227215b58b023ec6876799```\u003cbr\u003e\nSignature in hex:\u003cbr\u003e\n```28eff4676d7839648dda925ba92d447dd7552e177a302f32681fc76278088f9f1fb98051666aa02dd80f7d9b7c01d42ea1abbb3e65de8f1fd04be7b747fb0692```\u003cbr\u003e",
      "type": "apiKey",
      "name": "Signature",
      "in": "header"
    }
  }
}